{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"stsw","text":"<p>The Last-Word Safe-Tensor Stream Suite</p>"},{"location":"#overview","title":"Overview","text":"<p>stsw is a high-performance, pure-Python implementation for streaming safetensors files. It provides perfectionist-grade tools for working with large tensor collections while maintaining minimal memory usage.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>StreamWriter: Write large tensor collections with minimal memory usage</li> <li>StreamReader: Read tensors lazily with zero-copy memory mapping</li> <li>100% Compatibility: Bit-perfect with the official safetensors format</li> <li>Type Safe: Full type hints with pyright strict mode</li> <li>Robust: CRC32 verification, atomic writes, comprehensive error handling</li> <li>Cross-Platform: Works on Linux, macOS, and Windows</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code># Basic installation\npip install stsw\n\n# With optional dependencies\npip install stsw[torch,numpy]  # For PyTorch/NumPy support\npip install stsw[all]          # Everything including dev tools\n\n# Via npm (installs Python package automatically)\nnpm install -g stsw\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#writing-tensors","title":"Writing Tensors","text":"<pre><code>import numpy as np\nfrom stsw import StreamWriter, TensorMeta\n\n# Define your tensors\ndata1 = np.random.rand(1000, 1000).astype(np.float32)\ndata2 = np.random.randint(0, 256, (500, 500, 3), dtype=np.uint8)\n\n# Create metadata\nmetas = [\n    TensorMeta(\"embeddings\", \"F32\", data1.shape, 0, data1.nbytes),\n    TensorMeta(\"image\", \"I8\", data2.shape, 4000064, 4000064 + data2.nbytes),\n]\n\n# Write to file\nwith StreamWriter.open(\"model.safetensors\", metas, crc32=True) as writer:\n    writer.write_block(\"embeddings\", data1.tobytes())\n    writer.finalize_tensor(\"embeddings\")\n\n    writer.write_block(\"image\", data2.tobytes())\n    writer.finalize_tensor(\"image\")\n</code></pre>"},{"location":"#reading-tensors","title":"Reading Tensors","text":"<pre><code>from stsw import StreamReader\n\n# Open file with memory mapping\nwith StreamReader(\"model.safetensors\", verify_crc=True) as reader:\n    # List available tensors\n    print(reader.keys())  # ['embeddings', 'image']\n\n    # Get tensor metadata\n    meta = reader.meta(\"embeddings\")\n    print(f\"Shape: {meta.shape}, dtype: {meta.dtype}\")\n\n    # Load as NumPy array\n    embeddings = reader.to_numpy(\"embeddings\")\n\n    # Load as PyTorch tensor (if available)\n    image = reader.to_torch(\"image\", device=\"cuda\")\n\n    # Get raw memoryview (zero-copy)\n    raw_data = reader.get_slice(\"embeddings\")\n</code></pre>"},{"location":"#high-level-api","title":"High-Level API","text":"<pre><code>import torch\nimport stsw\n\n# Save entire state dict\nstate_dict = {\n    \"model.weight\": torch.randn(1000, 1000),\n    \"model.bias\": torch.randn(1000),\n}\n\nstsw.dump(state_dict, \"checkpoint.safetensors\", crc32=True)\n\n# Load it back\nloaded = torch.load(\"checkpoint.safetensors\", weights_only=True)\n</code></pre>"},{"location":"#cli-tools","title":"CLI Tools","text":"<p>stsw provides several command-line tools for working with safetensors files:</p>"},{"location":"#inspect","title":"inspect","text":"<p>Display information about tensors in a file: <pre><code>stsw inspect model.safetensors\n\n# Output:\n# Tensor Name          Shape              Dtype    Size (MB)\n# embeddings           [1000, 1000]       F32      4.00\n# image                [500, 500, 3]      I8       0.75\n# Total: 2 tensors, 4.75 MB\n</code></pre></p>"},{"location":"#verify","title":"verify","text":"<p>Verify CRC32 checksums: <pre><code>stsw verify model.safetensors\n\n# Output:\n# Verifying CRC32 checksums...\n# \u2713 embeddings: OK\n# \u2713 image: OK\n# All checksums verified successfully!\n</code></pre></p>"},{"location":"#convert","title":"convert","text":"<p>Convert PyTorch checkpoint to safetensors: <pre><code>stsw convert model.pt model.safetensors --crc32\n\n# Output:\n# Loading PyTorch checkpoint...\n# Found 2 tensors, total size: 4.75 MB\n# Writing safetensors file...\n# \u2713 Conversion complete!\n</code></pre></p>"},{"location":"#selftest","title":"selftest","text":"<p>Run self-test to verify installation: <pre><code>stsw selftest\n\n# Output:\n# Running stsw self-test...\n# \u2713 Write test passed\n# \u2713 Read test passed\n# \u2713 CRC32 verification passed\n# \u2713 PyTorch integration passed\n# \u2713 NumPy integration passed\n# All tests passed! stsw is working correctly.\n</code></pre></p>"},{"location":"#performance","title":"Performance","text":"<p>stsw is designed for maximum performance with minimal memory usage:</p> Operation Throughput Memory Usage Write (NVMe) 1.8 GB/s &lt;80 MB Read (mmap) 6.2 GB/s &lt;50 MB CRC32 verification 2.5 GB/s &lt;80 MB"},{"location":"#advanced-usage","title":"Advanced Usage","text":""},{"location":"#custom-buffer-sizes","title":"Custom Buffer Sizes","text":"<pre><code># Use larger buffer for better throughput on fast storage\nwriter = StreamWriter.open(\n    \"large_model.safetensors\",\n    metas,\n    buffer_size=16 * 1024 * 1024,  # 16 MB buffer\n    align=128  # Align to 128 bytes\n)\n</code></pre>"},{"location":"#progress-tracking","title":"Progress Tracking","text":"<pre><code># Use with tqdm for progress bars\nfrom tqdm import tqdm\n\nwith StreamWriter.open(\"model.safetensors\", metas) as writer:\n    with tqdm(total=total_bytes) as pbar:\n        for name, data in tensors:\n            writer.write_block(name, data)\n            pbar.update(len(data))\n            writer.finalize_tensor(name)\n</code></pre>"},{"location":"#error-handling","title":"Error Handling","text":"<pre><code>from stsw.io.fileio import FileIOError\nfrom stsw._core.header import HeaderError\n\ntry:\n    reader = StreamReader(\"model.safetensors\")\nexcept FileNotFoundError:\n    print(\"File not found\")\nexcept HeaderError as e:\n    print(f\"Invalid header: {e}\")\nexcept FileIOError as e:\n    print(f\"I/O error: {e}\")\n</code></pre>"},{"location":"#troubleshooting","title":"Troubleshooting","text":""},{"location":"#windows-ci-issues","title":"Windows CI Issues","text":"<p>Currently, some tests fail on Windows in GitHub Actions CI. This doesn't affect the functionality of the package on Windows systems.</p>"},{"location":"#memory-mapping-on-small-files","title":"Memory Mapping on Small Files","text":"<p>For files smaller than 4KB, stsw automatically falls back to regular file reading instead of memory mapping.</p>"},{"location":"#bf16-support","title":"BF16 Support","text":"<p>BF16 tensors are supported but require special handling. When loading as NumPy arrays, they are converted to float32 with a warning.</p>"},{"location":"#development","title":"Development","text":"<pre><code># Install development dependencies\npip install -e \".[dev]\"\n\n# Run tests\nmake test\n\n# Type checking\nmake type\n\n# Linting\nmake lint\n\n# Format code\nmake format\n</code></pre>"},{"location":"#license","title":"License","text":"<p>Apache-2.0. See LICENSE for details.</p>"},{"location":"#links","title":"Links","text":"<ul> <li>GitHub Repository</li> <li>PyPI Package</li> <li>npm Package</li> <li>Issue Tracker</li> </ul>"}]}